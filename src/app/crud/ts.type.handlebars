{{#if (isEntity)}}
import { Component, OnInit, Input, ViewChild, HostListener } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { MatCheckbox, MatButton, MatIcon, MatTooltip, MatInput, MatFormField } from '@angular/material';
import { ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Observable } from 'rxjs/Observable';
import { map } from 'rxjs/operators';
import gql from 'graphql-tag';
import { ComponentCanDeactivate } from '../pending-changes.guard';
import { GraphQLService } from '../graphql.service';
import { {{name}}, {{name}}Patch } from '../../models/types';

const {{name}}Fields = gql`fragment {{toLowerCase name}}Fields on {{name}} { nodeId,{{#each fields}}{{#if (isField)}}{{name}} {{/if}}{{/each}} }`;
const Read = gql`query read($nodeId:ID!){ {{toLowerCase name}}(nodeId:$nodeId)
  {...{{toLowerCase name}}Fields } } ${ {{name}}Fields}`;
const Create = gql`mutation create({{#each fields}}{{#if (isField)}}${{name}}:{{type}}{{#ifCond type "!==" "Boolean"}}{{#if isRequired}}!{{/if}}{{/ifCond}} {{/if}}{{/each}})
  {create{{name}}(input:{
  {{toLowerCase name}}:{ {{#each fields}}{{#if (isField)}}{{name}}:${{name}} {{/if}}{{/each}} } })
  { {{toLowerCase name}}{...{{toLowerCase name}}Fields } } } ${ {{name}}Fields}`;
const Update = gql`mutation update($nodeId:ID!,{{#each fields}}{{#if (isField)}}${{name}}:{{type}} {{/if}}{{/each}})
  {update{{name}}(input:{nodeId:$nodeId,
  {{toLowerCase name}}Patch:{ {{#each fields}}{{#if (isField)}}{{name}}:${{name}} {{/if}}{{/each}} } })
  { {{toLowerCase name}}{...{{toLowerCase name}}Fields } } } ${ {{name}}Fields}`;
const Delete = gql`mutation delete($nodeId:ID!)
  {delete{{name}}(input:{nodeId:$nodeId})
  { {{toLowerCase name}}{...{{toLowerCase name}}Fields } } } ${ {{name}}Fields}`;

@Component({
  selector: 'app-{{toLowerCase name}}',
  templateUrl: './{{toLowerCase name}}.type.html',
  styleUrls: ['./crud.css']
})
export class {{name}}Component implements OnInit, ComponentCanDeactivate  {
  @Input() {{toLowerCase name}} = {} as {{name}};
  @ViewChild('crudForm') crudForm: FormGroup;
  private allowDeactivate: boolean;

  constructor(
    private route: ActivatedRoute,
    private location: Location,
    private gqlSv: GraphQLService,
  ) {}

  ngOnInit(): void {
    this.allowDeactivate = false;
    if (this.route.snapshot.paramMap.get('id') !== null) {
      this.gqlSv.query<{ {{toLowerCase name}}: {{name}} }>
        (Read, {'nodeId': this.route.snapshot.paramMap.get('id')}).pipe(
        map((_) => _.{{toLowerCase name}})).subscribe(_ => this.{{toLowerCase name}} = _); }
  }

  @HostListener('window:beforeunload')
  canDeactivate(): Observable<boolean> | boolean {
    if (this.allowDeactivate) { this.allowDeactivate = false; return true; }
    return !this.crudForm.dirty;
  }

  back(): void {
    this.location.back();
  }

  save(): void {
    this.allowDeactivate = true;
    if (this.route.snapshot.paramMap.get('id') !== null) {
      this.gqlSv.mutate<{update{{name}}: { {{toLowerCase name}}: {{name}} } }>
        (Update, this.{{toLowerCase name}}, 'update').pipe(
        map((_) => _.update{{name}}.{{toLowerCase name}})).subscribe(() => this.back());
      // console.log(`Updated="${JSON.stringify(_[0])}"`);
    } else {
      const result = this.gqlSv.mutate<{create{{name}}: { {{toLowerCase name}}: {{name}} } }>
        (Create, this.{{toLowerCase name}}, 'create').pipe(
        map((_) => _.create{{name}}.{{toLowerCase name}})).subscribe(() => this.back());
      // console.log(`Created="${JSON.stringify(result)}"`);
    }
  }

  delete(): void {
    this.allowDeactivate = true;
    if (this.route.snapshot.paramMap.get('id') !== null) {
      if (confirm('Are you sure you want to delete this record?')) {
        this.gqlSv.mutate<{delete{{name}}: { {{toLowerCase name}}: {{name}} } }>
          (Delete, this.{{toLowerCase name}}, 'delete').pipe(
          map((_) => _.delete{{name}}.{{toLowerCase name}})).subscribe(() => this.back());
      }
    }
  }
}
{{/if}}