{{#if (isEntity)}}
import { Component, OnInit, AfterViewInit, ViewChild, ChangeDetectorRef } from '@angular/core';
import { Router } from '@angular/router';
import { MatTable, MatTableDataSource, MatPaginator, MatSort,
  MatCheckbox, MatButton, MatIcon, MatTooltip, MatInput, MatFormField, MatDialog } from '@angular/material';
import { Observable } from 'rxjs/Observable';
import { map } from 'rxjs/operators';
import { {{name}}, {{name}}Patch } from '../../models/types';
import { GraphQLService } from '../graphql.service';
import gql from 'graphql-tag';

const {{name}}Fields = gql`fragment {{toLowerCase name}}Fields on {{name}} { nodeId,{{#each fields}}{{#if (isField)}}{{name}} {{/if}}{{/each}} }`;
const ReadAll = gql`query readAll{all{{pluralize name}}
  {nodes{...{{toLowerCase name}}Fields } } } ${ {{name}}Fields}`;
// const Delete = gql`mutation delete($nodeId:ID!)
//   {delete{{name}}(input:{nodeId:$nodeId})
//   { {{toLowerCase name}}{...{{toLowerCase name}}Fields } } } ${ {{name}}Fields}`;

@Component({
  selector: 'app-{{toLowerCase name}}-list',
  templateUrl: './{{toLowerCase name}}.type.html',
  styleUrls: ['./list.css']
})
export class {{name}}ListComponent implements OnInit, AfterViewInit {
  displayedColumns = [{{#each fields}}{{#if (isField)}}'{{name}}',{{/if}}{{/each}}];
  dataSource = new MatTableDataSource<{{name}}>();
  dialogResult: any;
  // @ViewChild('{{name}}Table') {{name}}Table: MatTable<any>;
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  constructor(
    private dlgSv: MatDialog,
    private gqlSv: GraphQLService,
    private router: Router
  ) {}

  ngOnInit() {
    this.readAll();
    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);
  }

  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  readAll(): void {
    this.gqlSv.query<{all{{pluralize name}}: {nodes: {{name}}[]}}>(ReadAll).pipe(
      map((_) => _.all{{pluralize name}}.nodes)).subscribe(_ => this.dataSource.data = _);
  }

  goto(row: string): void {
    this.router.navigate(['/{{toLowerCase name}}/' + row]);
  }

  // delete({{toLowerCase name}}: {{name}}): void {
  //   if (confirm('Are you sure you want to delete this record?')) {
  //     this.gqlSv.mutate<{delete{{name}}: { {{toLowerCase name}}: {{name}} }}>
  //       (Delete, {{toLowerCase name}}, 'delete').pipe(
  //       map((_) => _.delete{{name}}.{{toLowerCase name}})).subscribe();
  //     this.dataSource.data = this.dataSource.data.filter(_ => _.nodeId !== {{toLowerCase name}}.nodeId);
  //   }
  // }
}
{{/if}}